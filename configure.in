define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
AC_INIT(src/bltInit.c)
AC_CONFIG_HEADER(src/bltConfig.h)
AC_CONFIG_AUX_DIR(cf)
AC_PREREQ(2.0)	

# -----------------------------------------------------------------------
#
# 	Handle command line options
#
#		--with-tcl=DIR
#		--with-tk=DIR
#		--with-cc=CC		
#		--with-cflags=flags	This is probably for me only
#
# -----------------------------------------------------------------------

bltIncludes="-I../tcl8.0.3/generic -I../tk8.0.3/generic"
bltLibraries=""
bltAuxLibs=""
bltRunPath=""

blt_ckcmd_tcl_home=""
blt_ckcmd_tk_home=""
blt_ckcmd_jpeg_home="no"
blt_ckcmd_cc=""
blt_ckcmd_cflags="$CFLAGS"

AC_ARG_WITH(tcl, [  --with-tcl=DIR          find Tcl headers and libraries in DIR],
  blt_ckcmd_tcl_home=$withval)
AC_ARG_WITH(tk, [  --with-tk=DIR          find Tk headers and libraries in DIR],
  blt_ckcmd_tk_home=$withval)
AC_ARG_ENABLE(jpeg, [  --enable-jpeg=DIR          find JPEG headers and libraries in DIR], [
  unset ac_cv_header_jpeglib_h
  unset ac_cv_lib_jpeg ac_cv_lib_jpeg_jpeg_read_header
  blt_ckcmd_jpeg_home=$enableval ])
AC_ARG_WITH(cc, [  --with-cc=CC		  set C compiler to CC], [
  blt_ckcmd_cc=$with_cc 
  unset ac_cv_prog_CC
  unset ac_cv_prog_CPP ])
AC_ARG_WITH(cflags, [  --with-cflags=FLAGS  	  set compiler flags to FLAGS],
  blt_ckcmd_cflags="$with_cflags")

AC_CANONICAL_SYSTEM

# -----------------------------------------------------------------------
#
# 	Set a variable containing current working directory if /bin/sh
#	doesn't do it already.
#
# -----------------------------------------------------------------------

PWD=`pwd`

# -----------------------------------------------------------------------
#
# 	C compiler and debugging flags
#
# -----------------------------------------------------------------------

blt_ckenv_cc=$CC

#
# CC search order
#
#  1. command line (--with-cc)
#  2. environment variable ($CC)
#  3. cached variable ($blt_cv_prog_cc)
#  4. check for program (AC_PROG_CC)
#  4. default to cc
#

AC_MSG_CHECKING([which C compiler])
if test "x${blt_ckcmd_cc}" != "x" ; then 
  CC=${blt_ckcmd_cc}
  unset ac_cv_prog_CPP
  unset ac_cv_prog_CC
elif test "x${blt_ckenv_cc}" != "x" ; then
  unset ac_cv_prog_CPP
  unset ac_cv_prog_CC
elif test "x${blt_cv_prog_cc}" != "x" ; then
  CC=${blt_cv_prog_cc}
  unset ac_cv_prog_CC
else 
  AC_PROG_CC
fi
if test "x${CC}" = "x" ; then
  CC=cc
fi
AC_MSG_RESULT([$CC])

unset blt_cv_prog_cc
AC_CACHE_VAL(blt_cv_prog_cc, blt_cv_prog_cc=$CC)
AC_SUBST(CC)
AC_PROG_CPP
if test "x${GCC}" != "x" ; then
  bltHaveGcc="yes"
else
  AC_MSG_CHECKING([if C compiler is really gcc])
    AC_EGREP_CPP(_cc_is_gcc_, [
#ifdef __GNUC__
    _cc_is_gcc_
#endif
],      [bltHaveGcc=yes], [bltHaveGcc=no])
  AC_MSG_RESULT([$bltHaveGcc])
fi

if test "${bltHaveGcc}" = "yes" ; then
  GCCFLAGS="-fwritable-strings -O"
else 
  GCCFLAGS=""
fi
AC_SUBST(GCCFLAGS)

#
# CFLAGS search order
#
#  1. command line (--with-cflags)
#  2. cached variable ($blt_cv_prog_cflags)
#  3. set to "-O6" if using gcc ($bltHaveGcc)
#  4. otherwise, default to "-O"
#
AC_MSG_CHECKING([default compiler flags])
if test  "x${blt_ckcmd_cflags}" != "x" ; then 
  CFLAGS=${blt_ckcmd_cflags}
elif test "x${blt_cv_prog_cflags}" != "x" ; then
  CFLAGS=${blt_cv_prog_cflags}"
elif test "${bltHaveGcc}" = "yes" ; then
  CFLAGS="-O6"
else
  CFLAGS="-O""
fi
AC_MSG_RESULT([$CFLAGS])
unset blt_cv_prog_cflags
AC_CACHE_VAL(blt_cv_prog_cflags, blt_cv_prog_cflags=$CFLAGS)
AC_SUBST(CFLAGS)

# -----------------------------------------------------------------------
#
# Programs:	Check for existence of ranlib and install programs
#
# -----------------------------------------------------------------------

AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_LN_S

# -----------------------------------------------------------------------
#
# Headers:	Check for header files used
#
# -----------------------------------------------------------------------

AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_CHECK_HEADERS(string.h float.h math.h errno.h limits.h sys/param.h)
AC_CHECK_HEADERS(sys/time.h waitflags.h sys/wait.h)
AC_CHECK_HEADERS(malloc.h memory.h)
AC_CHECK_HEADERS(setjmp.h)

if test "${blt_ckcmd_jpeg_home}" != "no" ; then
  oldFlags=${CPPFLAGS}
  if test "${blt_ckcmd_jpeg_home}" = "yes" ; then
    CPPFLAGS=""
  else
    CPPFLAGS="-I${blt_ckcmd_jpeg_home}/include"
  fi
  AC_CHECK_HEADERS(jpeglib.h, [blt_jpeglib_h="${CPPFLAGS}"], [blt_jpeglib_h=""])
  CPPFLAGS=${oldFlags}
fi

# Run this check after jpeglib.h because jpeglib.h sets HAVE_STDLIB_H
AC_CHECK_HEADERS(stdlib.h unistd.h)

AC_MSG_CHECKING([whether strdup is declared in header files])
AC_CACHE_VAL(blt_cv_decl_strdup, 
    AC_EGREP_CPP(strdup, [
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif /* HAVE_UNISTD_H */
],      [blt_cv_decl_strdup=yes], [blt_cv_decl_strdup=no]))

if test "${blt_cv_decl_strdup}" = "no"; then
    AC_DEFINE(NO_DECL_STRDUP)
fi
AC_MSG_RESULT([$blt_cv_decl_strdup])

AC_MSG_CHECKING([whether drand48 is declared in header files])
AC_CACHE_VAL(blt_cv_decl_drand48, 
    AC_EGREP_CPP(drand48, [
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_MATH_H
#include <math.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif /* HAVE_UNISTD_H */
],      [blt_cv_decl_drand48=yes], [blt_cv_decl_drand48=no]))

if test "${blt_cv_decl_drand48}" = "no"; then
    AC_DEFINE(NO_DECL_DRAND48)
fi
AC_MSG_RESULT([$blt_cv_decl_drand48])

# -----------------------------------------------------------------------
#
# Functions: 	Check for  strdup, drand48, and srand48.
#
# -----------------------------------------------------------------------

AC_HAVE_FUNCS(strdup drand48 srand48)

# -----------------------------------------------------------------------
#
# Types:	Check for existence of types of size_t and pid_t
#
# -----------------------------------------------------------------------

AC_TYPE_SIZE_T
AC_TYPE_PID_T
AC_C_BIGENDIAN

# -----------------------------------------------------------------------
#
#	Check whether <sys/wait.h> defines the type "union wait" 
#	correctly.  It's needed because of weirdness in HP-UX where 
#	"union wait" is defined in both the BSD and SYS-V  environments.  
#	Checking the usability of WIFEXITED seems to do	the trick.
#
# -----------------------------------------------------------------------

AC_MSG_CHECKING([whether union wait is defined correctly])
AC_CACHE_VAL(blt_cv_struct_wait_works,
    AC_TRY_COMPILE([#include <sys/types.h> 
#include <sys/wait.h>], [
union wait x;
WIFEXITED(x);		/* Generates compiler error if WIFEXITED
			 * uses an int. */
], 
    	[blt_cv_struct_wait_works="yes"], 
	[blt_cv_struct_wait_works="no"]))

if test "${blt_cv_struct_wait_works}" = "no"; then
    AC_DEFINE(NO_UNION_WAIT)
fi
AC_MSG_RESULT([$blt_cv_struct_wait_works])

# -----------------------------------------------------------------------
#
# 	Check the smallest value such that 1.0 + x != 1.0.
#	For ANSI compilers this is DBL_EPSILON in float.h
#
#--------------------------------------------------------------------

AC_MSG_CHECKING([whether DBL_EPSILON is defined in float.h])
AC_CACHE_VAL(blt_cv_found_dbl_epsilon,
    AC_EGREP_CPP(yes,	
   [
#ifdef HAVE_FLOAT_H
#include <float.h>
#endif
#ifdef DBL_EPSILON
 yes
#endif
], blt_cv_found_dbl_epsilon=yes, blt_cv_found_dbl_epsilon=no) 
)
AC_MSG_RESULT([${blt_cv_found_dbl_epsilon}])

if test "${blt_cv_found_dbl_epsilon}" = "no" ; then
  AC_CACHE_VAL(blt_cv_dbl_epsilon, 
  oldFlags="$CFLAGS"
  CFLAGS="-g -lm"
  AC_MSG_CHECKING([whether DBL_EPSILON can be computed])
  AC_TRY_RUN_WITH_OUTPUT(blt_cv_dbl_epsilon, [
main () {
    double e, u;
    u = 1.0;
    for(;;) {
       u *= 0.5;
       if ((1.0 + u) == 1.0) {
	   break;
       }
    }
    e = u * 2.0;
    printf("%.17e\n", e);
    exit(0);
}])
    CFLAGS="$oldFlags"
    AC_DEFINE_UNQUOTED(BLT_DBL_EPSILON, ${blt_cv_dbl_epsilon})
    AC_MSG_RESULT([${blt_cv_dbl_epsilon}])
)
fi

AC_PATH_X

# -----------------------------------------------------------------------
#
#	Find the Tcl build configuration file "tclConfig.sh"
#
# -----------------------------------------------------------------------

AC_MSG_CHECKING([for tclConfig.sh])
tclConfigFile=""

guesses="\
 $prefix/lib \
 $exec_prefix/lib \
 $PWD/../tcl8.0.3/unix \
 $PWD/../tcl7.6/unix \
 $PWD/../tcl7.5/unix"

for dir in $guesses; do
  if test -r "$dir/tclConfig.sh" ; then
    tclConfigFile="$dir/tclConfig.sh"
    break
  fi
done
AC_MSG_RESULT([${tclConfigFile}])

if test "x$tclConfigFile" = "x" ; then
  echo "can't find Tcl configuration script \"tclConfig.sh\""
  exit 1
fi

# -----------------------------------------------------------------------
#
#	Find the Tk build configuration file "tkConfig.sh"
#
# -----------------------------------------------------------------------

AC_MSG_CHECKING([for tkConfig.sh])
tkConfigFile=""
guesses="\
 $prefix/lib \
 $exec_prefix/lib \
 $PWD/../tk8.0.3/unix \
 $PWD/../tk4.2/unix \
 $PWD/../tk4.1/unix"

for dir in $guesses; do
  if test -r "$dir/tkConfig.sh" ; then
    tkConfigFile="$dir/tkConfig.sh"
    break
  fi
done
AC_MSG_RESULT([${tkConfigFile}])

# -----------------------------------------------------------------------
#
#	Find the [incr Tcl] build configuration file "itclConfig.sh"
#
#	If we find one, use this directory's versions of tclConfig.sh
#	and tkConfig.sh.   This will point us to versions of Tcl and
#	Tk with namespace support.
#
# -----------------------------------------------------------------------

AC_MSG_CHECKING([for itclConfig.sh])
itclConfigFile=""
guesses="\
 $prefix/lib \
 $exec_prefix/lib \
 $PWD/../itcl3.0.1/unix"

for dir in $guesses; do
  if test -r "$dir/itclConfig.sh" ; then
    itclConfigFile="$dir/itclConfig.sh"
    if test -r "$dir/tclConfig.sh" ; then
      tclConfigFile="$dir/tclConfig.sh"
    fi
    if test -r "$dir/tkConfig.sh" ; then
      tkConfigFile="$dir/tkConfig.sh"
    fi
    break
  fi
done
AC_MSG_RESULT([${itclConfigFile}])

# -----------------------------------------------------------------------
#
#	Source in the Tcl/Tk/[incr Tcl] configuration scripts.  
#
#	First source the Tcl/Tk scripts.  Then source the [incr Tcl]
#	scripts, if needed.  The variables [incr Tcl] script will
#	override those of the the tclConfig.sh or tkConfig.sh
#
#	BTW: Does anyone actually use the tclConfig.sh and tkConfig.sh 
#	scripts? They seem to be always missing something.  For example, 
#	why don't they say where to find the Tcl and Tk header files?
#
#       For example, give me the library directory paths separately 
#	(I can't easily parse "-Ldir", but I can always paste a -L 
#	on the front).  If I want to specify equivalent of the -R flag, 
#	I need the build a path of the library directories. Such as
#
#	   "-R $(BLTLIB):$(TKLIB):$(TCLLIB):($XLIB):$(JPEGLIB)"
#
# -----------------------------------------------------------------------

if test "x$tkConfigFile" != "x" ; then
  . $tclConfigFile
  . $tkConfigFile
fi

tclIncSpec="-I${TCL_PREFIX}/include"
tkIncSpec="-I${TK_PREFIX}/include"
tclLibDir=${TCL_PREFIX}/lib
tkLibDir=${TK_PREFIX}/lib

itclLibSpec=""
itclIncSpec=""
itclSuffix=""
if test "x$itclConfigFile" != "x" ; then
  . $itclConfigFile
  if test "${ITCL_MAJOR_VERSION}" = "2" ; then 
    tclIncSpec="-I${TCL_PREFIX}/include/itcl"
    tkIncSpec="-I${TK_PREFIX}/include/itcl"
    tclLibDir=${TCL_PREFIX}/lib/itcl
    tkLibDir=${TK_PREFIX}/lib/itcl
    itclSuffix="i"
  fi
fi

tclLibSpec=${TCL_LIB_SPEC}
tkLibSpec=${TK_LIB_SPEC}

case $target in
  *-sunos4*|NetBSD-*|FreeBSD-*|OpenBSD-*)
    tclLib="-ltcl${TCL_MAJOR_VERSION}${TCL_MINOR_VERSION}${itclSuffix}"
    tkLib="-ltk${TK_MAJOR_VERSION}${TK_MINOR_VERSION}${itclSuffix}"
    ;;
  *)
    tclLib="-ltcl${TCL_MAJOR_VERSION}.${TCL_MINOR_VERSION}${itclSuffix}"
    tkLib="-ltk${TK_MAJOR_VERSION}.${TK_MINOR_VERSION}${itclSuffix}"
    ;;
esac

# -----------------------------------------------------------------------
# 
# Tk libraries and header files
#
# -----------------------------------------------------------------------
bltIncludes="${bltIncludes} ${tkIncSpec}"
bltLibraries="${bltLibraries} ${tkLibSpec}"
if test "x${tkLibDir}" != "x" ; then
  bltRunPath="${bltRunPath}:${tkLibDir}"
fi

# -----------------------------------------------------------------------
# 
# Tcl libraries and header files
#
# Add a header file directory specification only if the Tcl headers reside 
# in a different directory from Tk's.  
#
#
# -----------------------------------------------------------------------
if test "${tkIncSpec}" != "${tclIncSpec}" ; then
  bltIncludes="${bltIncludes} ${tclIncSpec}"
fi

if test "${tkLibDir}" = "${tclLibDir}" ; then
  bltLibraries="${bltLibraries} ${tclLib}"
else 
  bltLibraries="${bltLibraries} ${tclLibSpec}"
  if test "x${tclLibDir}" != "x" ; then
    bltRunPath="${bltRunPath}:${tclLibDir}"
  fi
fi

# -----------------------------------------------------------------------
# 
# [incr Tcl] include files
#
# -----------------------------------------------------------------------
if test "x${itclIncSpec}" != "x" ; then
  bltIncludes="${itclIncSpec} ${bltIncludes}"
fi

# -----------------------------------------------------------------------
# 
# [incr Tcl] libraries
#
# -----------------------------------------------------------------------
if test "x${itclLibSpec}" != "x" ; then
  bltLibraries="${itclLibSpec} ${bltLibraries}"
fi

# -----------------------------------------------------------------------
# 
# -lX11
#
# -----------------------------------------------------------------------

if test "${tkLibDir}" = "${x_libraries}" ; then
  bltLibraries="${bltLibraries} -lX11"
else 
  if test "x${x_libraries}" = "x" ; then
    bltLibraries="${bltLibraries} -lX11"
  else
    bltLibraries="${bltLibraries} -L${x_libraries} -lX11"
    if test "x${tclLibDir}" != "x" ; then
      bltRunPath="${bltRunPath}:${x_libraries}"
    fi
  fi
fi
if test "${tkIncDir}" != "${x_includes}" ; then
  if test "x${x_includes}" != "x" ; then
    bltIncludes="${bltIncludes} -I${x_includes}"
  fi
fi

# -----------------------------------------------------------------------
# 
# -lsocket
#
# -----------------------------------------------------------------------
AC_CHECK_LIB(socket, main)

# -----------------------------------------------------------------------
# 
# -lnsl
#
# -----------------------------------------------------------------------
AC_CHECK_LIB(nsl, main)

# -----------------------------------------------------------------------
# 
# -lm
#
# -----------------------------------------------------------------------
AC_CHECK_LIB(m, main)

# -----------------------------------------------------------------------
# 
# JPEG library
#
# -----------------------------------------------------------------------
if test "${blt_ckcmd_jpeg_home}" != "no" ; then
  if test "${blt_ckcmd_jpeg_home}" = "yes" ; then
    spec="-ljpeg"
    dir=""
  else
    spec="-L${blt_ckcmd_jpeg_home}/lib -ljpeg"
    dir=${blt_ckcmd_jpeg_home}/lib
  fi
  AC_CHECK_LIB(jpeg, jpeg_read_header, [found=yes], [found=no], $spec)
  if test "${found}" = "yes" ; then
    bltLibraries="${bltLibraries} ${spec}"
    if test "x${dir}" != "x" ; then
      bltRunPath="${bltRunPath}:${dir}"
      bltAuxLibs="${dir}/libjpeg ${bltAuxLibs}"
    else 
      bltAuxLibs="libjpeg ${bltAuxLibs}"
    fi
  fi
fi

if test "x${blt_jpeglib_h}" != "x" ; then
  bltIncludes="${bltIncludes} ${blt_jpeglib_h}"
fi

# -----------------------------------------------------------------------
#
# 	Set up a new default prefix to installation path.  The ways
#	the prefix can be set and their precedence are as follows:
#
#	1. --prefix option given to ./configure. (prefix != NONE)
#       2. use previously configured Tk prefix
#
# -----------------------------------------------------------------------

if test "$prefix" = "NONE" ; then
  prefix=${TK_PREFIX}
fi

if test "$exec_prefix" = "NONE" ; then
  exec_prefix=$prefix
fi


# -------------------------------------------------------------------------
#
#	Check for [incr Tcl] header files
#
# -------------------------------------------------------------------------

oldFlags=$CPPFLAGS
CPPFLAGS="$CPPFLAGS $bltIncludes"
AC_CHECK_HEADERS(itcl.h)
AC_CHECK_HEADERS(itk.h)
CPPFLAGS=$oldFlags

# -------------------------------------------------------------------------
#
#	Extract the BLT version number for the blt.h header
#
# -------------------------------------------------------------------------

AC_MSG_CHECKING([BLT major version number])
AC_CACHE_VAL(blt_cv_major_version, 
  oldFlags="$CFLAGS"
  CFLAGS="$CFLAGS $bltIncludes"
  AC_TRY_RUN_WITH_OUTPUT(blt_cv_major_version, [
#include "${srcdir}/blt.h"
main() { printf("%d", BLT_MAJOR_VERSION); exit(0); }
  ])
  CFLAGS="$oldFlags"
)
bltMajor=${blt_cv_major_version}
AC_MSG_RESULT([$blt_cv_major_version])

AC_MSG_CHECKING([BLT minor version number])
AC_CACHE_VAL(blt_cv_minor_version, 
  oldFlags="$CFLAGS"
  CFLAGS="$CFLAGS $bltIncludes"
  AC_TRY_RUN_WITH_OUTPUT(blt_cv_minor_version, [
#include "${srcdir}/blt.h"
main() { printf("%d", BLT_MINOR_VERSION); exit(0); }
  ])
  CFLAGS="$oldFlags"
)

AC_MSG_RESULT([$blt_cv_minor_version])
bltMinor=${blt_cv_minor_version}

# Add BLT to the run path
if test "x${libdir}" != "x" ; then
  bltRunPath="${libdir}${bltRunPath}"
fi

bltLibraries="${bltLibraries} ${LIBS}"

#--------------------------------------------------------------------
#
#	Check if we can generate shared libraries on this system.
#	Set flags to generate shared libraries for systems that we 
#	know about.  Start with Tcl's variables, make changes
#	as we know about the different systems.
#
#	Why don't I just use the tclConfig.sh script information?
#       
#	1. Imbedding major *and* minor version numbers in library 
#	   names is really dumb.  I'm sorry but it is (It should
#	   have been an omen when it failed with the SunOS and 
#          FreeBSD linkers). 
#	
#	   Header files, man pages, etc aren't versioned, so what's
#	   the point?  Worse, it defeats the whole rationale behind
#	   shared libraries.  You're *supposed* to be able to slip
#	   in a new version of library and let the programs 
#	   automatically use them.  So in that vein, putting major 
#	   version numbers in the library name makes sense, but not
#	   the minor too. And that's why most systems have version 
#	   numbers built into the shared library suffix (e.g. .so.8). 
#
#	   So now tclConfig.sh isn't a convenience, it's a damn
#	   necessity.  How else do you know the name of the 
#	   library?  So what do most people do? They make symbolic
#	   links to libtcl.a libtk.a, etc.  Kind of funny isn't it?
#
#       2. On linux (ELF) it doesn't version the library properly.
#          Also it fails to set the -Wl,-rpath flag.
#
#	3. Some of the flags Tcl chooses are compiler dependent.
#	   What if you compile the Tcl/Tk libraries with one compiler,
#	   and compile and link BLT with another?  
#
#--------------------------------------------------------------------

LIB_BASE_NAME=libBLT

# Initialize shared library build variables

SHLIB_CFLAGS="$TCL_SHLIB_CFLAGS"
SHLIB_LD="$TCL_SHLIB_LD"
SHLIB_LD_FLAGS="$TCL_LD_FLAGS"
SHLIB_RUNPATH="$TCL_LD_SEARCH_FLAGS"

SHLIB_SUFFIX=".so.${bltMajor}"
SHLIB_TARGET=""
SHLIB_CFLAGS=""
SHLIB_LD_LIBS=""
EXT_LDFLAGS="$LDFLAGS"
LDFLAGS=""

buildShared="yes"

case $target in

  *-aix4.[[2-9]]*)
    # No Position-Independent flags needed
    SHLIB_CFLAGS=""

    # Use shell-script to link shared library
    srcPath=`cd ${srcdir}/cf; pwd`
    SHLIB_LD="${srcdir}/cf/ldAix /bin/ld -bhalt:4 -bM:SRE -bE:lib.exp -H512 -T512 -bnoentry"
    SHLIB_LD_LIBS="${bltLibraries}"
    bltLibraries="${bltLibraries} -ldl"
    LDFLAGS="-L${bltRunPath}"
    ;;

  *-aix*)
    # No Position-Independent flags needed
    SHLIB_CFLAGS=""

    # Use shell-script to link shared library
    srcPath=`cd ${srcdir}/cf; pwd`
    SHLIB_LD="${srcPath}/cf/ldAix /bin/ld -bhalt:4 -bM:SRE -bE:lib.exp -H512 -T512 -bnoentry"
    SHLIB_LD_LIBS="${bltLibraries}"
    bltLibraries="${bltLibraries} -lld"
    LDFLAGS="-L${bltRunPath}"
    ;;

  *-bsdi*)
    SHLIB_CFLAGS=""
    SHLIB_LD="shlicc"
    SHLIB_LD_FLAGS="-r"
    SHLIB_LD_LIBS="${bltLibraries}"
    bltLibraries="${bltLibraries} -ldl"
    ;;

  *-dgux*)
    SHLIB_CFLAGS="-K PIC"
    SHLIB_LD="cc"
    SHLIB_LD_FLAGS="-G"
    bltLibraries="${bltLibraries} -ldl"
    ;;

  *-hpux*)
    AC_CHECK_LIB(dld, shl_load, [found=yes], [found=no])
    if test "${found}" = "yes" ; then
      SHLIB_CFLAGS="+z"
      SHLIB_LD="ld"
      SHLIB_LD_FLAGS="-b -n"
      SHLIB_SUFFIX=".sl"

      bltLibraries="${bltLibraries} -ldld"
      LDFLAGS="-Wl,-E -Wl,+b,${bltRunPath}:."
    fi
    ;;

  *-irix-[56]*)
    SHLIB_CFLAGS=""
    SHLIB_LD="ld"
    SHLIB_LD_FLAGS="-shared -rdata_shared"
    LDFLAGS="-Wl,-rpath,${bltRunPath}"
    ;;

  *-irix64-*)
    SHLIB_CFLAGS=""
    SHLIB_LD="ld"
    SHLIB_LD_FLAGS="-32 -shared -rdata_shared -rpath /usr/local/lib"

    LDFLAGS="-Wl,-rpath,${bltRunPath}"
    ;;

  *-linux*)
    SHLIB_CFLAGS="-fPIC"
    SHLIB_LD="${CC}"
    SHLIB_SUFFIX=".so.${bltMajor}.${bltMinor}"
    SHLIB_LD_FLAGS="-shared -Wl,-E -Wl,-soname,libBLT.so.${bltMajor}"

    bltLibraries="${bltLibraries} -ldl"
    LDFLAGS="-Wl,-rpath,${bltRunPath}"
    ;;

  *-ncr-sysv4-*2*)

    SHLIB_CFLAGS="-K PIC"
    SHLIB_LD="cc"
    SHLIB_LD_FLAGS="-G"
    SHLIB_SUFFIX=".so"

    bltLibraries="${bltLibraries} -ldl"
    ;;

  *-ncr-sysv4*)
    SHLIB_CFLAGS="-K PIC"
    SHLIB_LD="cc"
    SHLIB_LD_FLAGS="-G -Wl,-Bexport"
    SHLIB_SUFFIX=".so"

    bltLibraries="${bltLibraries} -ldl"
    LDFLAGS="-Wl,-Bexport"
    ;;

  *-netbsd*|*-freebsd*|*-openbsd*)
    # Not available on all versions:  check for include file.
    AC_CHECK_HEADER(dlfcn.h, test_ok=yes, test_ok=no)
    if test "$test_ok" = yes; then
      SHLIB_CFLAGS="-fpic"
      SHLIB_LD="ld"
      SHLIB_LD_FLAGS="-Bshareable -x"
      SHLIB_SUFFIX=".so"
    fi
    ;;

  *-nextstep*)
    SHLIB_CFLAGS=""
    SHLIB_LD="cc"
    SHLIB_LD_FLAGS="-nostdlib -r"
    SHLIB_SUFFIX=".so"
    ;;

  *-osf1-1.[012]*)
    # OSF/1 1.[012] from OSF, and derivatives, including Paragon OSF/1

    SHLIB_CFLAGS=""

    # Warning: Ugly Makefile Hack 
    #	Make package name same as library name

    SHLIB_LD='ld -R -export $@:'
    SHLIB_SUFFIX=".so"
    ;;

  *-osf1-1.*)
    # OSF/1 1.3 from OSF using ELF, and derivatives, including AD2

    SHLIB_CFLAGS="-fpic"
    SHLIB_LD="ld -shared"
    SHLIB_SUFFIX=".so"
    ;;

  *-osf1V*)
    # Digital OSF/1

    SHLIB_CFLAGS=""
    SHLIB_LD='ld'
    SHLIB_LD_FLAGS='-shared -expect_unresolved "*"'
    SHLIB_SUFFIX=".so"
    LDFLAGS="-Wl,-rpath,${bltRunPath}"
    ;;

  *-sco*)
    # Note, dlopen is available only on SCO 3.2.5 and greater.  However,
    # this test works, since "uname -s" was non-standard in 3.2.4 and
    # below.

    SHLIB_CFLAGS="-Kpic -belf"
    SHLIB_LD="ld"
    SHLIB_LD_FLAGS="-G"
    SHLIB_SUFFIX=".so"
    LDFLAGS="-belf -Wl,-Bexport"
    ;;

  *-sni-sysv*)

    SHLIB_CFLAGS="-K PIC"
    SHLIB_LD="cc"
    SHLIB_LD_FLAGS="-G"
    SHLIB_SUFFIX=".so"

    bltLibraries="${bltLibraries} -ldl"
    ;;

  *-sunos4*)

    SHLIB_CFLAGS="-PIC"
    SHLIB_LD="ld"
    SHLIB_LD_FLAGS="-assert pure-text"
    SHLIB_SUFFIX=".so.${bltMajor}.${bltMinor}"
    bltLibraries="${bltLibraries} -ldl"
    ;;

  *-solaris2*)

    SHLIB_CFLAGS="-KPIC"
    SHLIB_LD="/usr/ccs/bin/ld"
    SHLIB_LD_FLAGS="-G -z text"
    SHLIB_LD_LIBS="$(bltLibraries)"

    bltLibraries="${bltLibraries} -ldl"
    LDFLAGS="-R ${bltRunPath}"
    ;;

  *-mips-dde-sysv*)

    SHLIB_CFLAGS="-KPIC"
    SHLIB_LD="cc"
    SHLIB_LD_FLAGS="-G"
    SHLIB_SUFFIX=".so"

    bltLibraries="${bltLibraries} -ldl"

    # Some UNIX_SV* systems (unixware 1.1.2 for example) have linkers
    # that don't grok the -Bexport option.  Test that it does.

    hold_ldflags=$LDFLAGS
    AC_MSG_CHECKING(for ld accepts -Bexport flag)
    LDFLAGS="${LDFLAGS} -Wl,-Bexport"
    AC_TRY_LINK(, [int i;], found=yes, found=no)
    LDFLAGS=$hold_ldflags
    AC_MSG_RESULT($found)
    if test $found = yes; then
      LDFLAGS="-Wl,-Bexport"
    fi
    ;;

  *)
    buildShared="no"
    ;;

esac

LDFLAGS="$EXT_LDFLAGS $LDFLAGS"

# If we're running gcc, then change the C flags for compiling shared
# libraries to the right flags for gcc, instead of those for the
# standard manufacturer compiler.

if test "$bltHaveGcc" = "yes" ; then
  SHLIB_CFLAGS="-fPIC"
fi

if test "${buildShared}" = "yes" ; then
  SHLIB_TARGET="shared"
  AC_SUBST(SHLIB_CFLAGS)
  AC_SUBST(SHLIB_TARGET)
  AC_SUBST(SHLIB_LD)
  AC_SUBST(SHLIB_LD_FLAGS)
  AC_SUBST(SHLIB_LD_LIBS)
  AC_SUBST(SHLIB_LIBS)
  AC_SUBST(SHLIB_SUFFIX)
fi

AC_SUBST(LDFLAGS)
AC_SUBST(EXTRA_LDFLAGS)

INCLUDES=${bltIncludes}
AC_SUBST(INCLUDES)
LIBS=${bltLibraries}
AC_SUBST(LIBS)
BLT_MAJOR_VERSION=${bltMajor}
AC_SUBST(BLT_MAJOR_VERSION)
BLT_MINOR_VERSION=${bltMinor}
AC_SUBST(BLT_MINOR_VERSION)
BLT_VERSION=${bltMajor}.${bltMinor}
AC_SUBST(BLT_VERSION)
AUX_LIBS="${bltAuxLibs}"
AC_SUBST(AUX_LIBS)

#--------------------------------------------------------------------
#	Propagate prefix argument as installation directory.
#--------------------------------------------------------------------

BLT_LIBRARY="${prefix}/lib/blt${bltMajor}.${bltMinor}"
AC_SUBST(BLT_LIBRARY)

#--------------------------------------------------------------------
#	Print out some of the more important settings 
#--------------------------------------------------------------------
echo ""
echo "Configuration results:"
echo ""
echo "  tcl.h      found in  $tclIncSpec"
echo "  tk.h       found in  $tkIncSpec"
echo "  X11/Xlib.h found in  -I$x_includes"
echo "  libtcl.a   found in  $tclLibSpec"
echo "  libtk.a    found in  $tkLibSpec"
echo "  libX11.a   found in  -L$x_libraries -lX11"
echo ""
echo "Directories where BLT is to be installed:"
echo ""
echo "  \"\$prefix\" is $prefix"
echo "  \"\$exec_prefix\" is $exec_prefix"
echo ""
echo "  bltwish      to be installed in  $bindir"
echo "  libBLT.a     to be installed in  $libdir"
echo "  scripts      to be installed in  $BLT_LIBRARY"
echo "  manual pages to be installed in  $mandir"
echo ""

#--------------------------------------------------------------------
#
#	Generate the following Makefiles
#
#	   ./Makefile
#	   ./src/Makefile
#	   ./src/shared/Makefile
#	   ./man/Makefile
#	   ./library/Makefile
#	   ./demos/Makefile
#
#--------------------------------------------------------------------
AC_OUTPUT(Makefile src/Makefile src/shared/Makefile man/Makefile library/Makefile demos/Makefile)
