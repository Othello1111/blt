
[This is a pre-release version of BLT.  It's basically the latest

snapshot of BLT, as it moves towards a full release.  What this means
is that the documentation and demos still need work.  Let me know
about any configuration/compiler/installation goofs so I make sure
they're fixed for the next release.]

This is version 2.4 of the BLT library.  It's an extension to the
Tcl/Tk toolkit.  You simply compile and link with the Tcl/Tk
libraries. It does not require the Tcl or Tk source files.

BLT is available from 

    ftp.tcltk.com 

in the "pub/blt" directory. The URL is 

    ftp://ftp.tcltk.com/pub/blt/BLT2.4.tar.gz

This release has been compiled and tested with versions:

	Tcl 7.5 / Tk 4.1
	Tcl 7.6 / Tk 4.2
	Tcl/Tk 8.0
	Tcl/Tk 8.1a2

What is BLT? 

  BLT is an extension to Tk.  It adds plotting widgets (X-Y graph, 
  barchart, stripchart), a powerful geometry manager, a new canvas 
  item, and several new commands to Tk.  

  Plotting widgets:  

    graph, barchart, stripchart
		BLT has X-Y graph, barchart, and stripchart widgets that are
		both easy to use and customize.  All the widgets work with
		BLT vector data objects, which makes it easy to manage data.
 
  Hierarchical list box:

    hierbox 	Displays a general ordered tree which may be built 
		on-the-fly or all at once.

  Tab set:

    tabset	Can be used either as a tab notebook or simple tabset.
		Multi-tiered and/or scrolled tabsets are available.
		Notebook pages can be torn-off into separate windows and 
		later put back. 
    
  Geometry Manager:  

    table	A table-based geometry manager. Lets you specify widget
	      	layouts by row and column positions in the table. Unlike the
		packer or grid, you can finely control and constrain window
		sizes.

  Vector Data Object:

    vector	Lets you manage a vector of floating point values in a
		high-level fashion.  Vectors inter-operate seamlessly with 
		the plotting widgets. The graphs will automatically redraw 
		themselves when the vector data changes. Vector's components 
		can be managed through a Tcl array variable, a Tcl command, 
		or the using its own C API.

  Background Program Execution:

    bgexec	Like Tcl's "exec ... &", but collects the output, error, and 
		status of the detached UNIX subprocesses.  Sets a Tcl variable 
		upon completion.  

  Busy Command:

    busy	For preventing user-interactions when the application is
		busy.  Manages an invisible "busy" window which prevents
		further user interactions (keyboard, mouse, button, etc.).
		Also you can provide a busy cursor that temporarily 
		overrides those of the Tk widgets.

  New Canvas Item:

    eps		An new item is added to the Tk canvas for handling
		encapsulated PostScript.  It lets you embed an EPS file into
		the canvas displaying either an EPS preview image found in 
		the file, or a Tk image that you provide.  When you print 
		the canvas the EPS item will automatically include the EPS 
		file, translating and scaling the PostScript.  For example, 
		you could use "eps" items to tile several PostScript pages 
		into single page.

		The "eps" item can also be used as a replacement for "image"
		canvas items.  Unlike "image" canvas items, the image of an 
		eps item can be printed and scaled arbitrarily.

  Drag & Drop Facility:

    drag&drop	Adds drag-n-drop capabilities to Tk.  It uses "send"-style 
		communication between drag-drop sources and targets.  The 
		result is a much more powerful drag-and-drop mechanism than 
		is available with OpenLook or Motif.  

  Bitmap Command:

    bitmap	Lets you read and write bitmaps from Tcl.  You can define
		bitmaps from ordinary text strings.  Bitmaps can also be
		scaled and rotated.  For example, you can create a button
		with rotated text by defining a bitmap from a text string
		and rotating it.  You can then use the bitmap in the button
		widget.

  Miscellaneous Commands:

    winop	Basic window operations. You can raise, lower, map, or, 
		unmap windows.  Other operations let you move the pointer
		or take photo image snapshots of Tk widgets.

    bltdebug	Lets you trace the execution of Tcl commands and procedures.
		Prints out each Tcl command before it's executed.  

    watch	Lets you specify Tcl procedures to be run before and/or
		after every Tcl command.  May be used for logging, tracing, 
		profiling, or debugging or Tcl code.

    spline	Computes a spline fitting a set of data points (x and y 
		vectors) and produces a vector of the interpolated images 
		(y-coordinates) at a given set of x-coordinates.

    htext	A simple hypertext widget. Allows text and Tk widgets to
		be combined in a scroll-able text window.  Any Tk widget 
		can be embedded and used to form hyper-links.  Other 
		options allow for selections and text searches.

What's new in 2.4?

 1. "eps" canvas item.  

    An encapsulated PostScript canvas item lets you embed an EPS file into 
    the canvas.  The "eps" item displays either a EPS preview image found 
    in the file, or a Tk image that you provide.  

 2. "hierbox" widget.

    Hierarchical listbox widget. Displays a general ordered tree which 
    may be built on-the-fly or all at once.

 3. "tabset" widget.

    Can be used either as a tab notebook or simple tabset.  Tabs can 
    be arranged in a variety of ways: multi-tiered, scrolled, and 
    attached to any of the four sides.  Tab labels can contain both 
    images and text (text can be arbitrarily rotated). Notebook pages 
    can be torn-off into separate windows and replaced later. 
    
 4. Changes to vectors.

    New features:
	
     o	Vector expressions.  The vector now has an "expr" operation
	that lets you perform math (including math library
	functions) on vectors.  There are several new functions
	(such as "max", "min", "mean" "median", "q1", "q3", "prod",
	"sum", "adev", "sdev", "skew", ...)

		vector expr { sin(x)^2 + cos(x)^2 }
		y expr { log(x) * $value }

     o	New syntax to create and destroy vectors:

		vector create x 
		vector destroy x
 
	The old syntax for creating vectors still works.

		vector x

     o	Vectors are *not* automatically deleted when their Tcl
	variable is unset anymore. This means that you can
	temporarily map vectors to variables and use them as you
	would an ordinary Tcl array (kind of like "upvar").

	    proc AddValue { vecName value } {
		 $vecName variable x
	
		 set x(++end) $value
	    }	

	There's an "-watchunset" flag to restore the old
	behavior if you need it. 

	    vector create x -watchunset yes

     o  Vectors still automatically create Tcl variables by
	default.  I'd like to change this, but it silently
	breaks lots of code, so it will stay.

    Bug fixes:

     o  Vector reallocation failed when shrinking the vector.

     o  Vector "destroy" callback made after vector was
	already freed.

 5. Changes to Graph, Barchart, Stripchart widgets.

    New features:

     o 	Drop shadows for text (titles, markers, etc). Drop
	shadows improve contrast when displaying text over a
	background with similar color intensities.
   
     o  Postscript "-preview" option to generate a EPS
	PostScript preview image that can be read and
	displayed by the EPS canvas item.

     o  New "-topvariable", "-bottomvariable",
	"-leftvariable", and "-rightvariable" options.  They
	specify variables to contain the current margin
	sizes.  These variables are updated whenever the
	graph is redrawn.

     o  New "-aspect" option. Let's you maintain a particular aspect
	ratio for the the graph.

     o  Image markers can now be stretched and zoomed like
        bitmap markers.

     o  Bind operation for legend entries, markers, and elements.

	Much thanks to Julian Loaring <bigj@bigj.demon.co.uk> 
	for the suggestions.

     o  New "-xor" option for line markers, lets you draw the line
	by rubberbanded by XOR-ing without requiring the graph to
	be redrawn.  This can be used, for example, to select regions
	like in zooming.  

	Thanks to Johannes Zellner (joze@krisal.physik.uni-karlsruhe.de) 
	for the suggestion.

    Bug fixes:

     o	Closest line (point) broken when using pens styles.

     o	Marker elastic coordinates were wrong.

     o	PostScript bounding box included the border of the page.

     o	Bad PostScript generated for barchart symbols with stipples.

     o	Wrong dimensions computed with postscript " -maxpect" option.

     o  Text markers fixed.

	Thanks to De Clarke for the bug report and fix.


     o  Renamed axis configuration from "-range" to "-autorange" to
	match the documentation.  

	Thanks to Brian Smith for the correction.

     o  Fixed polygon marker pick routine.

     o  Fixed active tab labels overlapping the selected tab.


What's incompatible with releases prior to BLT 2.4?

 1. Vector names must start with a letter and contain letters, digits,
    or underscores.  

    Namespace Issues:	Vector names are still global. If Tcl provides
			an API, vectors may in the future be created on
			a per-namespace basis.  Right now, there's no
			mechanism for detecting when a namespace has been
			destroyed. Which is why you can't currently
			prefix a vector name with a namespace qualifier.

			[Ok, there is... as pointed out to me by Michael
			McLennan.  But it's not pretty.  So maybe soon
		        there will be vectors on a per namespace basis.]
	
 2. The "-mapped" options throughout the graph have been replaced
    by the "-hide" option.  The many usages of the word "map" was 
    getting confusing.  

	# No longer works.
	.graph legend configure -mapped no

	# Instead use this.
	.graph legend configure -hide yes    
 
   
How to compile and test BLT?

  See the file "INSTALL" for instructions.

When will the so-called "official" BLT work with Windows?  

  It's on my ever-sliding schedule. Fortunately, much of the work (if not
  all) has already been done by Gordon Chaffee and Robin Becker. Many thanks
  to the both of them for their fantastic efforts.  

  My goal is to get "busy" and "bgexec" (at least for NT) working too.
   
When will...?

  In general, I can't answer the "When will" questions, mostly out of 
  embarrassment.  My estimates of when new features and releases will
  occur usually turn out to be way way off.  

What does BLT stand for?

  Whatever you want it to.

--gah
